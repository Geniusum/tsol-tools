class TsolToPronunciation():
    def __init__(self):
        self.base_map = {
            # Multi
            'qσ': 'qu',
            'зw': '(è)sv',
            'зф': '(è)sf',
            'зп': '(è)sp',
            'зð': '(è)sd',
            'зr': '(è)sr',
            'ec': 'ès',
            'ßt': 'st(è)t',
            'ßŧ': 'st(è)ts',
            'Ϡḡ': 'j(è)jh',
            'cq': 'k',
            'öo': 'o(w)o',
            'æn': 'eaun',
            'œn': 'on',
            'oσ': 'ou',
            'kc': 'x',
            'иŋ': 'yèn',
            'ие': 'y',
            'ḳч': 'khch',
            'ḡч': 'ghch',
            'qk': 'kk',
            'ðз': 'ds',
            # Single
            'a': 'a',
            'æ': 'an',
            'ð': 'd',
            'o': 'o',
            'ö': 'ow',
            't': 't',
            'ŧ': 'ts',
            'e': 'e',
            'ẽ': 'è',
            'п': 'p',
            'ф': 'f',
            'з': 'z',
            'σ': 'u',
            'g': 'g',
            'ḡ': 'jh',
            'и': 'i',
            'ß': 'st',
            'б': 'b',
            'c': 's',
            'r': 'r',
            'w': 'w',
            'ŵ': 'v',
            'ϡ': 'j',
            'k': 'k',
            'ḳ': 'kh',
            'q': 'q',
            'm': 'm',
            'n': 'n',
            'ø': 'oh',
            'л': 'l',
            'ч': 'ch',
            'ŋ': 'èn',
            'œ': 'en'
        }
        
        self.vocal_map = {
            # Multi
            'qσ': 'qu',
            'зw': 'èsv',
            'зф': 'èsf',
            'зп': 'èsp',
            'зð': 'èsd',
            'зr': 'èsr',
            'ec': 'ès',
            'ßt': 'stèt',
            'ßŧ': 'stèts',
            'Ϡḡ': 'jèjh',
            'cq': 'k',
            'öo': 'owo',
            'æn': 'eaun',
            'œn': 'on',
            'oσ': 'ou',
            'kc': 'x',
            'иŋ': 'yèn',
            'ие': 'y',
            'ḳч': 'khch',
            'ḡч': 'ghch',
            'ck': 'kk',
            'ðз': 'ds',
            # Special
            't ': 'te',
            'in': 'ïhn',
            'ge': 'gué',
            # Single
            'a': 'ä',
            'æ': 'an',
            'ð': 'd',
            'o': 'ö',
            'ö': 'ow',
            't': 't',
            'ŧ': 'ts',
            'e': 'ë',
            'ẽ': 'è',
            'п': 'p',
            'ф': 'f',
            'з': 'z',
            'σ': 'ü',
            'g': 'gu',
            'ḡ': 'jh',
            'и': 'ï',
            'ß': 'st',
            'б': 'b',
            'c': 's',
            'r': 'r',
            'w': 'w',
            'ŵ': 'v',
            'ϡ': 'j',
            'k': 'k',
            'ḳ': 'kh',
            'q': 'q',
            'm': 'm',
            'n': 'n',
            'ø': 'oh',
            'л': 'l',
            'ч': 'ch',
            'ŋ': 'èn',
            'œ': 'en'
        }

    def translate(self, text: str, vocal_mode: bool=False) -> str:
        text_lower = text.lower()
        if vocal_mode:
            return ''.join(self.vocal_map.get(char, char) for char in text_lower)
        else:
            return ''.join(self.base_map.get(char, char) for char in text_lower)
